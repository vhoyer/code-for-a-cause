name: "Build"
on: push

# NOTE: If your `project.godot` is at the repository root, set `PROJECT_PATH` below to ".".

env:
  GODOT_VERSION: 4.4
  EXPORT_NAME: "game"
  PROJECT_PATH: .
  APP_ID: 3749960

jobs:
  export-windows:
    name: Windows Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.4
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mkdir -v -p ~/.config/
          mv /root/.config/godot ~/.config/godot
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          EXPORT_DIR="$(readlink -f build)"
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "Windows Desktop" "$EXPORT_DIR/windows/$EXPORT_NAME.exe"
          echo "Export complete, checking files:"
          ls -la "$EXPORT_DIR/windows/"
      - name: Create Build Info (Windows)
        run: |
          echo "$GITHUB_SHA" > "build/windows/version"
          echo "Version file created:"
          cat "build/windows/version"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: build/windows

  export-linux:
    name: Linux Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.4
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          EXPORT_DIR="$(readlink -f build)"
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "Linux" "$EXPORT_DIR/linux/$EXPORT_NAME.x86_64"
      - name: Create Build Info (Linux)
        run: |
          echo "$GITHUB_SHA" > "build/linux/version"
          echo "Version file created:"
          cat "build/linux/version"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: build/linux

  steam-deploy:
    if: github.ref == 'refs/heads/main'
    needs: [export-linux, export-windows]
    name: Upload to Steam
    runs-on: ubuntu-latest
    steps:
      - name: Set short git commit SHA
        id: vars
        run: |
          # Get the first 7 characters of the commit SHA
          echo "COMMIT_SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          path: build
      - uses: game-ci/steam-deploy@v3
        with:
          username: ${{ secrets.STEAM_USERNAME }}
          # https://github.com/marketplace/actions/steam-deploy
          # STEAM_CONFIG_VDF is the base64 encoded config.vdf file
          # generate it with:
          # $ steamcmd +login <username> <password> +quit
          # encode it with:
          # $ cat config/config.vdf | base64 > config_base64.txt
          # then copy the contents of config_base64.txt into STEAM_CONFIG_VDF
          configVdf: ${{ secrets.STEAM_CONFIG_VDF }}
          appId: ${{ env.APP_ID }}
          buildDescription: "${{ env.COMMIT_SHORT_SHA }} - ${{ github.event.head_commit.message }}"
          rootPath: build
          depot1Path: windows
          depot2Path: linux
          releaseBranch: prerelease

  butler-push:
    # only run this if running the CI on the main branch
    # if: github.ref == 'refs/heads/main'
    # disable cuz steam
    if: false
    needs: [export-linux, export-windows]
    name: Upload builds to itch.io
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.4
    env:
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      ITCH_USER: pemmy0
      ITCH_GAME: joe-adventure
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: build
      - name: setup butler
        run: |
          # -O specifies output name
          wget -O butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          # GNU unzip tends to not set the executable bit even though it's set in the .zip
          chmod +x butler
          # just a sanity check run (and also helpful in case you're sharing CI logs)
          ./butler -V
      - name: upload builds
        run: |
          ls build
          for channel in windows linux mac web; do
            echo "uploading $channel..."
            ./butler push build/$channel $ITCH_USER/$ITCH_GAME:$channel
          done

